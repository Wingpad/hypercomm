module tree_builder {
  namespace hypercomm {
    nodegroup tree_builder {
      entry tree_builder();

      entry void reg_endpoint(const int&, const CkArrayID&, const CkArrayIndex&);

      entry void reg_array(const CkArrayID&, const CkCallback&);
      entry void unreg_array(const CkArrayID&, const CkCallback&);

      entry void receive_upstream(const int&, const CkArrayID&, const CkArrayIndex&);
      entry void receive_downstream(const int&, const CkArrayID&, const CkArrayIndex&);

      entry void begin_inserting(const CkArrayID &aid, const CkCallback &cb);

      entry void done_inserting(const CkArrayID& aid, const CkCallback& cb) {
        while(this->insertion_statuses_[aid]) {
          serial {
            auto *lcount = &this->arrays_[aid];
            this->contribute(sizeof(std::int64_t), lcount, CkReduction::sum_long_long,
                             CkCallback(CkReductionTarget(tree_builder, recv_count_), thisProxy),
                             compress(aid));
          }
          when recv_count_[compress(aid)](const std::int64_t& gcount) serial {
            if (gcount == 0) {
              this->insertion_statuses_[aid] = false;
            }
          }
        }
        serial {
          this->contribute(cb);
        }
      }

  // private:
      entry [reductiontarget] void recv_count_(const std::int64_t&);
    };
  }
}
